//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro v5.10.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using test.Dal.FactoryClasses;
using test.Dal.RelationClasses;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace test.Dal.HelperClasses
{
	/// <summary>Singleton implementation of the ModelInfoProvider. This class is the singleton wrapper through which the actual instance is retrieved.</summary>
	public static class ModelInfoProviderSingleton
	{
		private static readonly IModelInfoProvider _providerInstance = new ModelInfoProviderCore();

		/// <summary>Dummy static constructor to make sure threadsafe initialization is performed.</summary>
		static ModelInfoProviderSingleton()	{ }

		/// <summary>Gets the singleton instance of the ModelInfoProviderCore</summary>
		/// <returns>Instance of the FieldInfoProvider.</returns>
		public static IModelInfoProvider GetInstance()
		{
			return _providerInstance;
		}
	}

	/// <summary>Actual implementation of the ModelInfoProvider.</summary>
	internal class ModelInfoProviderCore : ModelInfoProviderBase
	{
		/// <summary>Initializes a new instance of the <see cref="ModelInfoProviderCore"/> class.</summary>
		internal ModelInfoProviderCore()
		{
			Init();
		}

		/// <summary>Method which initializes the internal datastores.</summary>
		private void Init()
		{
			this.InitClass();
			InitTestEntityInfo();
			this.BuildInternalStructures();
		}

		/// <summary>Inits TestEntity's info objects</summary>
		private void InitTestEntityInfo()
		{
			this.AddFieldIndexEnumForElementName(typeof(TestFieldIndex), "TestEntity");
			this.AddElementFieldInfo("TestEntity", "Id", typeof(System.String), true, false, false, false,  (int)TestFieldIndex.Id, 50, 0, 0);
			this.AddElementFieldInfo("TestEntity", "Ma", typeof(System.String), false, false, false, true,  (int)TestFieldIndex.Ma, 50, 0, 0);
			this.AddElementFieldInfo("TestEntity", "Soluong", typeof(Nullable<System.Decimal>), false, false, false, true,  (int)TestFieldIndex.Soluong, 0, 2, 10);
			this.AddElementFieldInfo("TestEntity", "Ten", typeof(System.String), false, false, false, true,  (int)TestFieldIndex.Ten, 200, 0, 0);
		}
	}
}